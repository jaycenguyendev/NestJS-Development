// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
} 

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Product {
  id Int @default(autoincrement()) @id
  name String @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  price Float
  sale Boolean @default(false)
  availability Availability
  description Description?
  reviews Reviews[]
  tags Tag[]
}

model Description {
  id Int @default(autoincrement()) @id
  content String
  product Product @relation(fields: [productId], references: [id])
  productId Int @unique
}

model Reviews {
  id Int @default(autoincrement()) @id
  title String
  content String
  rating Int
  product Product @relation(fields: [productId], references: [id])
  productId Int
}

model Tag {
  id Int @default(autoincrement()) @id
  content String
  product Product[]
}

model User {
  id                Int       @default(autoincrement()) @id
  email             String    @unique
  password          String
  name              String?
  role              Role      @default(USER)
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
  emailVerified     DateTime?
  twoFactorEnabled  Boolean   @default(false)
  twoFactorSecret   TwoFactorSecret?
  sessions          Session[]
  refreshTokens     RefreshToken[]
  accounts          OAuthAccount[]
}

model Session {
  id           Int      @default(autoincrement()) @id
  sessionToken String   @unique
  user         User     @relation(fields: [userId], references: [id])
  userId       Int
  userAgent    String? // lưu thông tin thiết bị đăng nhập của user
  ip           String? // lưu ip đăng nhập của user
  expires      DateTime
  createdAt    DateTime @default(now())
}

model RefreshToken {
  id           Int      @default(autoincrement()) @id
  tokenHash    String   @unique
  user         User     @relation(fields: [userId], references: [id])
  userId       Int
  revoked      Boolean  @default(false)
  expires      DateTime
  createdAt    DateTime @default(now())
}

model OAuthAccount {
  id                Int      @default(autoincrement()) @id
  provider          String
  providerAccountId String
  user              User     @relation(fields: [userId], references: [id])
  userId            Int
  accessToken       String?
  refreshToken      String?
  expiresAt         Int?
  tokenType         String?
  scope             String?
  idToken           String?
  sessionState      String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  @@unique([provider, providerAccountId])
}

model TwoFactorSecret {
  id        Int      @default(autoincrement()) @id
  secret    String   // Đã mã hóa
  user      User     @relation(fields: [userId], references: [id])
  userId    Int      @unique
  createdAt DateTime @default(now())
}

model VerificationToken {
  id         Int      @default(autoincrement()) @id
  identifier String
  token      String   @unique
  expires    DateTime
  createdAt  DateTime @default(now())
}

enum Availability {
  IN_STORE
  ONLINE
}

enum Role {
  USER
  ADMIN
}